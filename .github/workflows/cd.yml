name: CD

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: public.ecr.aws/e7w4k6e4
  SERVICE_NAME: notification-service

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/reinput-key.pem
          chmod 600 ~/.ssh/reinput-key.pem
          cat >>~/.ssh/config <<END
          Host ec2
            HostName ${{ secrets.EC2_HOST }}
            User ${{ secrets.EC2_USERNAME }}
            IdentityFile ~/.ssh/reinput-key.pem
            StrictHostKeyChecking no
          END

      - name: Deploy to EC2
        run: |
          ssh ec2 '
            aws ecr-public get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

            if docker ps -a | grep -q ${{ env.SERVICE_NAME }}; then
              docker stop ${{ env.SERVICE_NAME }}
              docker rm ${{ env.SERVICE_NAME }}
              docker rmi ${{ env.ECR_REGISTRY }}/reinput/${{ env.SERVICE_NAME }}:latest || true
            fi

            docker pull ${{ env.ECR_REGISTRY }}/reinput/${{ env.SERVICE_NAME }}:latest
            docker run -d \
              --name ${{ env.SERVICE_NAME }} \
              --network host \
              -e DB_HOST="${{ secrets.DB_HOST }}" \
              -e DB_PORT="${{ secrets.DB_PORT }}" \
              -e DB_NAME="${{ secrets.DB_NAME }}" \
              -e DB_USERNAME="${{ secrets.DB_USERNAME }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              ${{ env.ECR_REGISTRY }}/reinput/${{ env.SERVICE_NAME }}:latest
            
            docker ps | grep ${{ env.SERVICE_NAME }}
          '